// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ======================================
// Start Mostly Next-Auth.js
// ======================================
model Account {
    id                String       @id @default(cuid())
    userId            String
    colorId           String
    // Email is optional cause it's not set at login, but with a custom event
    // Meaning it is null initially, but should always be set after the first login
    email             String?
    provider          String
    type              String
    providerAccountId String
    refresh_token     String       @db.Text
    access_token      String       @db.Text
    expires_at        Int
    token_type        String
    scope             String
    id_token          String?      @db.Text
    session_state     String?
    ext_expires_in    Int?
    isPrimary         Boolean      @default(false)
    user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    eventGroups       EventGroup[]
    events            Event[]
    color             AccountColor @relation(fields: [colorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    @@unique([provider, providerAccountId])
}

model AccountColor {
    id        String @id @default(cuid())
    color     String
    darkColor String
    order     Int

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    accounts  Account[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                       String      @id @default(cuid())
    name                     String?
    email                    String?     @unique
    emailVerified            DateTime?
    image                    String?
    accounts                 Account[]
    sessions                 Session[]
    payments                 Payment[]
    preference               Preference?
    membership               Membership  @default(FREE)
    paidUntil                Int? // in milliseconds
    stripeCustomerId         String?
    stripePlanId             String?
    subscriptionCanceledDate Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ======================================
// End Mostly Next-Auth.js
// ======================================

// ======================================
// Start Enums
// ======================================

enum Language {
    EN
    DE
    IT
    FR
    ES
}

enum EventCalendarType {
    BLOCKER
}

enum EventResponseStatus {
    ACCEPTED
    DECLINED
    NEEDS_ACTION
    TENTATIVE
}

enum Membership {
    FREE
    TRIAL
    PRO
    PREMIUM
}

// ======================================
// End Enums
// ======================================

// ======================================
// Start AgreeTo Specifics
// ======================================

model Preference {
    id             String   @id @default(cuid())
    userId         String   @unique
    formatLanguage Language @default(EN)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model EventGroup {
    id              String  @id @default(cuid())
    userId          String
    accountId       String
    title           String
    appointmentUrl  String?
    events          Event[]
    createBlocker   Boolean @default(false)
    isSelectionDone Boolean @default(false)

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt

    account Account @relation(fields: [accountId], references: [id])
}

model Event {
    id              String            @id @default(cuid())
    userId          String
    providerEventId String?
    eventGroupId    String
    accountId       String
    title           String
    location        String?
    description     String            @default("")
    attendees       Attendee[]
    calendarType    EventCalendarType @default(BLOCKER)
    startDate       DateTime
    endDate         DateTime
    isAgreeToEvent  Boolean           @default(true)
    isSelected      Boolean           @default(false)
    hasConference   Boolean           @default(false)

    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt

    eventGroup EventGroup @relation(fields: [eventGroupId], references: [id])
    account    Account    @relation(fields: [accountId], references: [id])

    @@index([eventGroupId])
}

model Attendee {
    id             String              @id @default(cuid())
    eventId        String?
    email          String
    name           String
    surname        String
    provider       String
    responseStatus EventResponseStatus
    color          String?

    event Event? @relation(fields: [eventId], references: [id])
}

model Payment {
    id                  String     @id @default(cuid())
    email               String
    userId              String
    eventId             String
    subscriptionId      String
    customerId          String
    membershipPlan      String
    membership          Membership
    membershipStartDate Int? // Shouldn't these be DateTime?
    membershipEndDate   Int?
    canceledDate        Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    user User @relation(fields: [userId], references: [id])
}

// ======================================
// End AgreeTo Specifics
// ======================================
